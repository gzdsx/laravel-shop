<?php

namespace App\Models;

use App\Models\Traits\HasDates;
use App\Models\Traits\HasImageAttribute;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;

/**
 * App\Models\Video
 *
 * @property int $id 主键
 * @property int $user_id 用户ID
 * @property string|null $title 标题
 * @property string $image 图片
 * @property string|null $content 介绍
 * @property string $source 源地址
 * @property string|null $hls HLS地址
 * @property string|null $link 链接
 * @property float $longitude 经度
 * @property float $latitude 纬度
 * @property string|null $province 省
 * @property string|null $city 市
 * @property string|null $district 区县
 * @property string|null $street 街道
 * @property int $views 浏览数
 * @property int $like_num 点赞数
 * @property int $share_num 分享数
 * @property int $comment_num 评论数
 * @property int $transcoded 转码状态
 * @property string|null $status 状态
 * @property \Illuminate\Support\Carbon|null $created_at 创建时间
 * @property \Illuminate\Support\Carbon|null $updated_at 更新时间
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\VideoComment> $comments
 * @property-read int|null $comments_count
 * @property-read mixed $player
 * @property-read \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\Routing\UrlGenerator|string|null $url
 * @property-read \App\Models\VideoLike|null $likeInfo
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\VideoLike> $likes
 * @property-read int|null $likes_count
 * @property-read \App\Models\User|null $user
 * @method static \Illuminate\Database\Eloquent\Builder|Video newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Video newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Video query()
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereCity($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereCommentNum($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereContent($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereDistrict($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereHls($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereImage($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereLatitude($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereLikeNum($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereLink($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereLongitude($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereProvince($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereShareNum($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereSource($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereStreet($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereTitle($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereTranscoded($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereUserId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Video whereViews($value)
 * @mixin \Eloquent
 */
class Video extends Model
{
    use HasImageAttribute, HasDates;

    protected $table = 'video';
    protected $primaryKey = 'id';
    protected $fillable = [
        'user_id', 'title', 'image', 'content', 'source', 'hls', 'link', 'longitude', 'latitude',
        'province', 'city', 'district', 'street', 'views', 'like_num', 'share_num',
        'comment_num', 'transcoded', 'status'
    ];
    protected $appends = ['player', 'url'];
    protected $with = ['user'];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function (Video $video) {
            $video->likes()->delete();
            $video->comments()->delete();
        });
    }


    public function getPlayerAttribute()
    {
        $url = $this->link;
        preg_match('/(youku\.com|v\.qq\.com)/', strtolower($url), $matches);
        if (isset($matches[1])) {
            if ($matches[1] == 'youku.com') {
                preg_match('/id\_(\w+)[\=|\.html]/', $url, $urls);
                return '<iframe src="https://player.youku.com/embed/' . $urls[1] . '" frameborder="0" webkit-playsinline playsinline x5-playsinline x-webkit-airplay="allow" allowfullscreen></iframe>';
            }

            if ($matches[1] == 'v.qq.com') {
                preg_match('/\/([a-zA-Z0-9]+)\.html/', $url, $urls);
                return '<iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=' . $urls[1] . '" webkit-playsinline playsinline x5-playsinline x-webkit-airplay="allow" allowFullScreen="true"></iframe>';
            }

            return null;
        }

        return null;
    }

    /**
     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\Routing\UrlGenerator|string|null
     */
    public function getUrlAttribute()
    {
        return $this->vid ? url('video/' . $this->vid . '.html') : null;
    }

    /**
     * @param $value
     * @return string
     */
    public function getSourceAttribute($value)
    {
        return material_url($value);
    }

    /**
     * @param $value
     */
    public function setSourceAttribute($value)
    {
        $this->attributes['source'] = str_replace(material_url(), '', $value);
    }

    public function getHlsAttribute($value)
    {
        return material_url($value);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'uid');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function likes()
    {
        return $this->hasMany(VideoLike::class, 'vid', 'vid');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function likeInfo()
    {
        return $this->hasOne(VideoLike::class, 'vid', 'vid')->where('uid', Auth::id());
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function comments()
    {
        return $this->hasMany(VideoComment::class, 'vid', 'vid');
    }
}
