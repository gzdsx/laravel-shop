<?php

namespace App\Models;

use App\Models\Traits\HasDates;
use App\Models\Traits\HasImageAttribute;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Overtrue\LaravelPinyin\Facades\Pinyin;


/**
 * App\Models\Page
 *
 * @property int $id 页面ID
 * @property int|null $user_id 作者ID
 * @property string|null $title 标题
 * @property string|null $name 别名
 * @property string $image 图片
 * @property string|null $excerpt 摘要
 * @property string|null $content 内容
 * @property int $sort_num 显示顺序
 * @property \Illuminate\Support\Carbon|null $created_at 创建时间
 * @property \Illuminate\Support\Carbon|null $updated_at 更新时间
 * @property-read \Illuminate\Contracts\Routing\UrlGenerator|string $url
 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\PageMeta> $metas
 * @property-read int|null $metas_count
 * @property-read \App\Models\User|null $user
 * @method static Builder|Page newModelQuery()
 * @method static Builder|Page newQuery()
 * @method static Builder|Page query()
 * @method static Builder|Page whereContent($value)
 * @method static Builder|Page whereCreatedAt($value)
 * @method static Builder|Page whereExcerpt($value)
 * @method static Builder|Page whereId($value)
 * @method static Builder|Page whereImage($value)
 * @method static Builder|Page whereName($value)
 * @method static Builder|Page whereSortNum($value)
 * @method static Builder|Page whereTitle($value)
 * @method static Builder|Page whereUpdatedAt($value)
 * @method static Builder|Page whereUserId($value)
 * @mixin \Eloquent
 */
class Page extends Model
{
    use HasDates, HasImageAttribute;

    protected $table = 'page';
    protected $primaryKey = 'id';
    protected $fillable = [
        'user_id', 'title', 'name', 'image', 'excerpt', 'content', 'sort_num'
    ];
    protected $appends = ['url'];
    protected $with = ['user'];
    protected $_metas = [];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope('sort', function (Builder $builder) {
            return $builder->orderBy('sort_num')->orderBy('id');
        });

        static::saving(function (Page $page) {
            if (!$page->name) {
                $page->name = Pinyin::permalink($page->title);
            }

            if (!$page->user_id) {
                $page->user_id = Auth::id();
            }
        });
    }

    /**
     * @return \Illuminate\Contracts\Routing\UrlGenerator|string
     */
    public function getUrlAttribute()
    {
        return url($this->name);
    }


    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo|User
     */
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'uid');
    }

    public function metas()
    {
        return $this->hasMany(PageMeta::class, 'page_id', 'id');
    }
}
