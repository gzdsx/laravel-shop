<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Cache;


/**
 * App\Models\ItemCatlog
 *
 * @property int $catid
 * @property int $fid 父级分类
 * @property int $typeid
 * @property string|null $name 分类名称
 * @property string|null $identifier
 * @property string $icon 图片
 * @property int $displayorder 显示顺序
 * @property int $level 级别
 * @property int $enable 是否可选
 * @property int $available 是否可用
 * @property string|null $keywords 关键字
 * @property string|null $description 描述
 * @property string|null $template_index 首页模板
 * @property string|null $template_list 列表页模板
 * @property string|null $template_detail 详细页模板
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\ItemCatlog[] $childs
 * @property-read int|null $childs_count
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Item[] $items
 * @property-read int|null $items_count
 * @property-read \App\Models\ItemCatlog $parent
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\ItemCatlogProps[] $props
 * @property-read int|null $props_count
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog enable()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog query()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereAvailable($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereCatid($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereDisplayorder($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereEnable($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereFid($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereIcon($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereIdentifier($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereKeywords($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereLevel($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereTemplateDetail($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereTemplateIndex($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereTemplateList($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Models\ItemCatlog whereTypeid($value)
 * @mixin \Eloquent
 */
class ItemCatlog extends Model
{
    protected $table = 'item_catlog';
    protected $primaryKey = 'catid';
    protected $fillable = [
        'catid', 'fid', 'typeid', 'name', 'identifier', 'icon', 'displayorder',
        'level', 'enable', 'available', 'keywords', 'description',
        'template_index', 'template_list', 'template_detail'
    ];

    public $timestamps = false;

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope('available', function (Builder $builder) {
            return $builder->where('available', 1)->orderBy('displayorder');
        });
    }

    /**
     * @param $value
     * @return string
     */
    public function getIconAttribute($value)
    {
        return $value ? image_url($value) : $value;
    }

    /**
     * @param $value
     */
    public function setIconAttribute($value)
    {
        $this->attributes['icon'] = strip_image_url($value);
    }

    /**
     * @param $value
     */
    public function setDisplayorderAttribute($value)
    {
        $this->attributes['displayorder'] = intval($value);
    }

    /**
     * @param int $default
     * @param array $catlogs
     * @param int $level
     * @return string
     */
    public static function getOptions($default = 0, $catlogs = [], $level = 0)
    {

        if (!$catlogs) $catlogs = self::fetchWithCache();

        $level++;
        $options = $selected = '';
        foreach ($catlogs as $catlog) {
            $prefix = str_repeat('|--', $level - 1);
            $selected = $default == $catlog->catid ? ' selected="selected"' : '';
            $options .= '<option value="' . $catlog->catid . '"' . $selected . '>' . $prefix . $catlog->name . '</option>';
            if ($catlog->childs) {
                $options .= self::getOptions($default, $catlog->childs, $level);
            }
        }
        return $options;
    }

    /**
     * @param $catid
     * @return array
     */
    public static function fetchAllChildIds($catid)
    {
        static $catloglist;
        if (!$catloglist) {
            $catloglist = self::all();
        }

        $Ids = [$catid];
        foreach ($catloglist as $catlog) {
            if ($catlog->fid == $catid) {
                $Ids[] = $catlog->catid;
                $Ids = array_merge($Ids, self::fetchAllChildIds($catlog->catid));
            }
        }
        return $Ids;
    }

    /**
     *
     */
    public static function updateCache()
    {
        $catlogs = [];
        self::with('childs')->orderBy('displayorder')->get()->map(function ($catlog) use (&$catlogs) {
            $catlogs[$catlog->fid][] = $catlog;
        });
        $data = $catlogs ? $catlogs[0] : [];
        Cache::forever('itemCatlogs', $data);
    }

    /**
     * @return mixed
     */
    public static function fetchWithCache()
    {
        $data = Cache::get('itemCatlogs');
        if (!is_array($data)) {
            self::updateCache();
            return self::fetchWithCache();
        }
        return $data;
    }

    /**
     * @param $query
     * @return mixed
     */
    public function scopeEnable(Builder $query)
    {
        return $query->where('enable', 1);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function items()
    {
        return $this->hasMany(Item::class, 'catid', 'catid');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function props()
    {
        return $this->hasMany(ItemCatlogProps::class, 'catid', 'catid');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function childs()
    {
        return $this->hasMany(ItemCatlog::class, 'fid', 'catid');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function parent()
    {
        return $this->belongsTo(ItemCatlog::class, 'fid', 'catid');
    }
}
