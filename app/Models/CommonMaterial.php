<?php

namespace App\Models;


use App\Models\Traits\HasDates;
use EloquentFilter\Filterable;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;


/**
 * App\Models\CommonMaterial
 *
 * @property int $id
 * @property int $user_id
 * @property string|null $name
 * @property string|null $description
 * @property string $url
 * @property string $thumb
 * @property string|null $width
 * @property string|null $height
 * @property string|null $type
 * @property string|null $extension 扩展名
 * @property int $size
 * @property string|null $mime
 * @property int $views
 * @property int $downloads
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read int|string $formated_size
 * @property-read \App\Models\User|null $user
 * @method static Builder|CommonMaterial filter(array $input = [], $filter = null)
 * @method static Builder|CommonMaterial newModelQuery()
 * @method static Builder|CommonMaterial newQuery()
 * @method static Builder|CommonMaterial paginateFilter($perPage = null, $columns = [], $pageName = 'page', $page = null)
 * @method static Builder|CommonMaterial query()
 * @method static Builder|CommonMaterial simplePaginateFilter(?int $perPage = null, ?int $columns = [], ?int $pageName = 'page', ?int $page = null)
 * @method static Builder|CommonMaterial whereBeginsWith(string $column, string $value, string $boolean = 'and')
 * @method static Builder|CommonMaterial whereCreatedAt($value)
 * @method static Builder|CommonMaterial whereDescription($value)
 * @method static Builder|CommonMaterial whereDownloads($value)
 * @method static Builder|CommonMaterial whereEndsWith(string $column, string $value, string $boolean = 'and')
 * @method static Builder|CommonMaterial whereExtension($value)
 * @method static Builder|CommonMaterial whereHeight($value)
 * @method static Builder|CommonMaterial whereId($value)
 * @method static Builder|CommonMaterial whereLike(string $column, string $value, string $boolean = 'and')
 * @method static Builder|CommonMaterial whereMime($value)
 * @method static Builder|CommonMaterial whereName($value)
 * @method static Builder|CommonMaterial whereSize($value)
 * @method static Builder|CommonMaterial whereThumb($value)
 * @method static Builder|CommonMaterial whereType($value)
 * @method static Builder|CommonMaterial whereUpdatedAt($value)
 * @method static Builder|CommonMaterial whereUrl($value)
 * @method static Builder|CommonMaterial whereUserId($value)
 * @method static Builder|CommonMaterial whereViews($value)
 * @method static Builder|CommonMaterial whereWidth($value)
 * @mixin \Eloquent
 */
class CommonMaterial extends Model
{
    use Filterable, HasDates;

    const TYPE_IMAGE = 'image';
    const TYPE_VIDEO = 'video';
    const TYPE_SOUND = 'sound';
    const TYPE_DOC = 'doc';
    const TYPE_FILE = 'file';

    protected $table = 'common_material';
    protected $primaryKey = 'id';
    protected $fillable = [
        'user_id', 'name', 'description', 'url', 'thumb', 'width', 'height', 'type', 'extension', 'size', 'views', 'downloads', 'mime'
    ];
    protected $appends = ['formated_size'];
    protected $with = ['user'];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (CommonMaterial $material) {
            if (!$material->user_id) $material->user_id = Auth::id();
        });

        static::deleting(function (CommonMaterial $material) {
            Storage::delete($material->getRawOriginal('url'));
            Storage::delete($material->getRawOriginal('thumb'));
        });
    }

    /**
     * @param $value
     * @return string
     */
    public function getThumbAttribute($value)
    {
        if ($this->type == 'image') {
            return $value ? image_url($value) : $value;
        }

        if ($this->type == 'video') {
            return asset('images/common/video.png');
        }

        if ($this->type == 'voice') {
            return asset('images/common/audio.png');
        }

        if ($this->type == 'doc') {
            return asset('images/common/doc.png');
        }

        return asset('images/common/file.png');
    }

    /**
     * @param $value
     */
    public function setThumbAttribute($value)
    {
        $this->attributes['thumb'] = strip_image_url($value);
    }


    /**
     * @param $value
     * @return string
     */
    public function getUrlAttribute($value)
    {
        return $value ? material_url($value) : $value;
    }

    /**
     * @param $value
     */
    public function setUrlAttribute($value)
    {
        $this->attributes['url'] = strip_image_url($value);
    }

    /**
     * @return int|string
     */
    public function getFormatedSizeAttribute()
    {
        return $this->size ? format_size($this->size) : 0;
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'uid');
    }
}
